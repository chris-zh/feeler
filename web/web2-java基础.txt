JVM基础

问题：对JVM的了解？
JVM运行时数据区域：
/*
方法区： 用于存储虚拟机加载的类信息，常量，静态变量，JIT编译后的代码，所有线程共享
堆：所有线程共享，用来存储实例对象。
虚拟机栈：线程私有，生命周期与线程相同，每个方法被执行的时候创建一个栈帧，一个方法的调用就是栈帧从入栈到出栈的过程。
    栈帧的结构：本地变量表，操作数栈，动态链接，方法出口。
        本地变量表：存放各种基本数据类型，对象引用，returnAddress（指向一个opcode）
本地方法栈：跟虚拟机栈类似，用来支持本地方法的调用
程序计数器：存储当前线程所执行的字节码的指示器，改变程序计数器的值来改变下一条执行的指令。
    如果当前执行的是Java代码，程序计数器保存JVM正在执行的opcode的地址，如果是native代码，程序计数器的值是空*/

类加载机制
    双亲委托机制：Java虚拟机的体系结构分为4层，Bootstrap Classloader，Extension Classloader,Application Classloader
        User Classloader。
        /*如果一个类加载器收到了类加载请求，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器去完成。
        每一层的类加载器都把类加载请求委派给父类加载器，直到所有的类加载请求都应该传递给顶层的启动类加载器。
        如果顶层的启动类加载器无法完成加载请求，子类加载器尝试去加载，如果连最初发起类加载请求的类加载器也无法完成加载请求时
        ，将会抛出ClassNotFoundException，而不再调用其子类加载器去进行类加载。*/
    自定义Classloader，继承Classloader，覆盖findClass方法。


JMM Java内存模型


GC


HTTP协议
